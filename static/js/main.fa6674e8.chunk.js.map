{"version":3,"sources":["ui/Display/Display.tsx","ui/button/Button.tsx","ui/counter/Counter.tsx","Input.tsx","ui/Settings/SettingsCounter.tsx","bll/counter-reducer.ts","ui/App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["Display","props","className","count","startValue","Button","onClick","button","disabled","title","Counter","maxCount","incButton","disabledInc","resetButton","disabledReset","Input","type","onChange","value","SettingsCounter","useState","maxValue","setMaxValue","minValue","setMinValue","e","currentTarget","valueAsNumber","setDisabledInc","setDisabledSet","setDisabledReset","setCount","setMaxCount","setStartValue","disabledSet","initialState","App","useSelector","state","counter","useDispatch","newValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa6674e8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\ntype DisplayType = {\r\n    startValue:number\r\n    count: number\r\n    maxCount:number\r\n}\r\n\r\nexport function Display(props: DisplayType) {\r\n    return (\r\n        <div className={props.count === 5 ? 'display active' : 'display'}>{props.startValue}</div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n\r\ntype ButtonType = {\r\n    title: string\r\n    button: () => void\r\n    disabled: boolean\r\n}\r\n\r\nexport function Button(props: ButtonType) {\r\n\r\n    return <button className='button'\r\n                   onClick={props.button}\r\n                   disabled={props.disabled}\r\n    >{props.title}\r\n    </button>\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport {Display} from \"../Display/Display\";\r\nimport {Button} from \"../button/Button\";\r\n\r\ntype CounterType = {\r\n    count: number\r\n    incButton: () => void\r\n    resetButton: () => void\r\n    maxCount:number\r\n    startValue:number\r\n    disabledInc: boolean\r\n    disabledReset: boolean\r\n\r\n}\r\n\r\nexport function Counter(props: CounterType) {\r\n    return (\r\n        <div className='container'>\r\n            <Display\r\n                startValue={props.startValue}\r\n                maxCount={props.maxCount}\r\n                count={props.count}/>\r\n            <div className='containerButton'>\r\n                <Button title={'inc'}\r\n                        button={props.incButton}\r\n                        disabled={props.disabledInc}/>\r\n                <Button title={'Reset'}\r\n                        button={props.resetButton}\r\n                        disabled={props.disabledReset}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype InputType = {\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\n\r\nexport function Input(props: InputType) {\r\n\r\n    return (\r\n        <div>\r\n            <input type='number' onChange={props.onChange} value={props.value}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {Display} from \"../Display/Display\";\r\nimport {Button} from \"../button/Button\";\r\nimport {Input} from \"../../Input\";\r\n\r\ntype CounterType = {\r\n    count: number\r\n    setCount: (value: number) => void\r\n    maxValue: number\r\n    setMaxCount: (value: number) => void\r\n    setStartValue: (value: number) => void\r\n    disabledInc: boolean\r\n    disabledReset: boolean\r\n    setDisabledInc: (value: boolean) => void\r\n    setDisabledReset: (value: boolean) => void\r\n    setDisabledSet: (value: boolean) => void\r\n    disabledSet: boolean\r\n    maxCount:number\r\n}\r\n\r\nexport function SettingsCounter(props: CounterType) {\r\n    let [maxValue, setMaxValue] = useState<number>(0)\r\n    let [minValue, setMinValue] = useState<number>(0)\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMaxValue(e.currentTarget.valueAsNumber)\r\n        props.setDisabledInc(true)\r\n        if (e.currentTarget.valueAsNumber === minValue || e.currentTarget.valueAsNumber <= 0 ||\r\n            minValue < e.currentTarget.valueAsNumber || minValue < 0) {\r\n            props.setDisabledSet(true)\r\n        } else {\r\n            props.setDisabledSet(false)\r\n\r\n        }\r\n\r\n    }\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMinValue(e.currentTarget.valueAsNumber)\r\n        props.setDisabledInc(true)\r\n        props.setDisabledReset(true)\r\n        if (e.currentTarget.valueAsNumber === minValue || e.currentTarget.valueAsNumber >= maxValue ||\r\n            e.currentTarget.valueAsNumber < 0) {\r\n            props.setDisabledSet(true)\r\n        } else {\r\n            props.setDisabledSet(false)\r\n        }\r\n    }\r\n    const setOnClick = () => {\r\n        props.setCount(minValue)\r\n        props.setMaxCount(maxValue)\r\n        props.setDisabledInc(false)\r\n        props.setStartValue(minValue)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='inputContainer'>\r\n            Max value:<Input value={maxValue} onChange={onChangeMaxValue}/>\r\n            Start value:<Input value={minValue} onChange={onChangeStartValue}/>\r\n            </div>\r\n            <div className='containerButton'>\r\n                <Button title={'set'}\r\n                        button={setOnClick}\r\n                        disabled={props.disabledSet}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","const initialState = {\r\n    value: 0\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nexport const counterReducer = (state: initialStateType = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"INC-VALUE\":\r\n            return {\r\n                ...state,\r\n                value: state.value + 1\r\n            }\r\n            case \"SET-VALUE\":\r\n            return {\r\n                ...state,\r\n                value:action.value\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\nexport const incValueAC = () => (\r\n    {type: 'INC-VALUE'} as const\r\n)\r\nexport const setValueFromLocalStorageAC = (value:number) => (\r\n    {type: 'SET-VALUE',value} as const\r\n)\r\nexport type incValueActionType = ReturnType<typeof incValueAC>\r\nexport type setValueFromLocalStorageActionType = ReturnType<typeof setValueFromLocalStorageAC>\r\n\r\nexport type ActionType=incValueActionType|setValueFromLocalStorageActionType","import React, {useState} from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\nimport {Counter} from \"./counter/Counter\";\nimport {SettingsCounter} from \"./Settings/SettingsCounter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../bll/store\";\nimport {incValueAC} from \"../bll/counter-reducer\";\n\n\nfunction App() {\n    const value = useSelector<AppStateType, number>(state => state.counter.value)\n    const dispatch = useDispatch()\n    const incHandler = () => {\n        dispatch(incValueAC())\n    }\n    let [maxCount, setMaxCount] = useState<number>(0)\n     let [startValue, setStartValue] = useState<number>(0)\n     let [count, setCount] = useState<number>(0);\n     let [disabledInc, setDisabledInc] = useState<boolean>(true)\n     let [disabledReset, setDisabledReset] = useState<boolean>(true)\n     let [disabledSet, setDisabledSet] = useState<boolean>(true)\n\n     const incButton = () => {\n         let newValue = startValue + 1;\n         setStartValue(newValue);\n         if (newValue === maxCount) {\n             setDisabledInc(true)\n         }\n         setDisabledReset(false)\n     }\n\n     const resetButton = () => {\n         setStartValue(count)\n         setDisabledInc(false)\n         setDisabledReset(true)\n     }\n\n    return (\n        <div className=\"App\">\n           <Counter count={count}\n                     incButton={incButton}\n                     resetButton={resetButton}\n                     disabledInc={disabledInc}\n                     disabledReset={disabledReset}\n                     maxCount={maxCount}\n                     startValue={startValue}/>\n            <SettingsCounter\n                maxValue={maxCount}\n                count={count}\n                setCount={setCount}\n                setStartValue={setStartValue}\n                setMaxCount={setMaxCount}\n                disabledInc={disabledInc}\n                disabledReset={disabledReset}\n                setDisabledInc={setDisabledInc}\n                setDisabledReset={setDisabledReset}\n                setDisabledSet={setDisabledSet}\n                disabledSet={disabledSet}\n                maxCount={maxCount}\n            />\n        </div>\n    );\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\nexport const store = createStore(rootReducer)\r\n\r\ntype AppStoreType = typeof store\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}